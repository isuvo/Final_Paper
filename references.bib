@article{Islam2024,
  title={Causative Insights into Open Source Software Security using Large Language Code Embeddings and Semantic Vulnerability Graph},
  author={Islam, Nafis Tanveer and Parra, Gonzalo De La Torre and Manual, Dylan and Jadliwala, Murtuza and Najafirad, Peyman},
  journal={arXiv preprint arXiv:2401.07035},
  year={2024}
}

@inproceedings{Cao2024ICSE,
  title={Coca: improving and explaining graph neural network-based vulnerability detection systems},
  author={Cao, Sicong and Sun, Xiaobing and Wu, Xiaoxue and Lo, David and Bo, Lili and Li, Bin and Liu, Wei},
  booktitle={Proceedings of the IEEE/ACM 46th International Conference on Software Engineering},
  pages={1--13},
  year={2024}
}

@inproceedings{Chu2024ISSTA,
  title={Graph neural networks for vulnerability detection: A counterfactual explanation},
  author={Chu, Zhaoyang and Wan, Yao and Li, Qian and Wu, Yang and Zhang, Hongyu and Sui, Yulei and Xu, Guandong and Jin, Hai},
  booktitle={Proceedings of the 33rd ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages={389--401},
  year={2024}
}

@inproceedings{Cao2024ASE,
  title={Snopy: Bridging Sample Denoising with Causal Graph Learning for Effective Vulnerability Detection},
  author={Cao, Sicong and Sun, Xiaobing and Wu, Xiaoxue and Lo, David and Bo, Lili and Li, Bin and Liu, Xiaolei and Lin, Xingwei and Liu, Wei},
  booktitle={Proceedings of the 39th IEEE/ACM International Conference on Automated Software Engineering},
  pages={606--618},
  year={2024}
}

@inproceedings{Rahman2024ICSE,
  title={Towards causal deep learning for vulnerability detection},
  author={Rahman, Md Mahbubur and Ceka, Ira and Mao, Chengzhi and Chakraborty, Saikat and Ray, Baishakhi and Le, Wei},
  booktitle={Proceedings of the IEEE/ACM 46th international conference on software engineering},
  pages={1--11},
  year={2024}
}

@inproceedings{Kuang2024KSEM,
  title={VulCausal: Robust Vulnerability Detection Using Neural Network Models from a Causal Perspective},
  author={Kuang, Hongyu and Zhang, Jingjing and Yang, Feng and Zhang, Long and Huang, Zhijian and Yang, Lin},
  booktitle={International Conference on Knowledge Science, Engineering and Management},
  pages={41--56},
  year={2024},
  organization={Springer}
}


@inproceedings{10.1145/3644032.3644448,
    author = {Marchetto, Alessandro},
    title = {Can explainability and deep-learning be used for localizing vulnerabilities in source code?},
    year = {2024},
    isbn = {9798400705885},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3644032.3644448},
    doi = {10.1145/3644032.3644448},
    abstract = {Security vulnerabilities are weaknesses of software due for instance to design flaws or implementation bugs that can be exploited and lead to potentially devastating security breaches. Traditionally, static code analysis is recognized as effective in the detection of software security vulnerabilities but at the expense of a high human effort required for checking a large number of produced false positive cases. Deep-learning methods have been recently proposed to overcome such a limitation of static code analysis and detect the vulnerable code by using vulnerability-related patterns learned from large source code datasets. However, the use of these methods for localizing the causes of the vulnerability in the source code, i.e., localize the statements that contain the bugs, has not been extensively explored.In this work, we experiment the use of deep-learning and explainability methods for detecting and localizing vulnerability-related statements in code fragments (named snippets). We aim at understanding if the code features adopted by deep-learning methods to identify vulnerable code snippets can also support the developers in debugging the code, thus localizing the vulnerability's cause. Our work shows that deep-learning methods can be effective in detecting the vulnerable code snippets, under certain conditions, but the code features that such methods use can only partially face the actual causes of the vulnerabilities in the code.},
    booktitle = {Proceedings of the 5th ACM/IEEE International Conference on Automation of Software Test (AST 2024)},
    pages = {110–119},
    numpages = {10},
    keywords = {cybersecurity, vulnerability detection, vulnerability localization},
    location = {Lisbon, Portugal},
    series = {AST '24}
}

@misc{Wilkin2023,
    author  = {Lamine Aouad},
    title   = {Causal Factors Analysis of Vulnerability Exploitation},
    year    = {2023},
    note    = {IriusRisk Blog},
    url     = {https://www.iriusrisk.com/resources-blog/causal-factors-analysis-of-vulnerability-exploitation}
}


@phdthesis{li2023xai,
  title={An XAI-based Framework for Software Vulnerability Contributing Factors Assessment},
  author={Li, Ding},
  year={2023},
  school={Concordia University},
  url= {https://spectrum.library.concordia.ca/id/eprint/993035/1/Li_MA_S2024.pdf}
}

@article{Xia2023,
  title={A survey of machine learning for big code and naturalness},
  author={Allamanis, Miltiadis and Barr, Earl T and Devanbu, Premkumar and Sutton, Charles},
  journal={ACM Computing Surveys (CSUR)},
  volume={51},
  number={4},
  pages={1--37},
  year={2018},
  publisher={ACM New York, NY, USA}
}

@inproceedings{Woo2023USENIX,
  title={$\{$V1SCAN$\}$: Discovering 1-day Vulnerabilities in Reused $\{$C/C++$\}$ Open-source Software Components Using Code Classification Techniques},
  author={Woo, Seunghoon and Choi, Eunjin and Lee, Heejo and Oh, Hakjoo},
  booktitle={32nd USENIX Security Symposium (USENIX Security 23)},
  pages={6541--6556},
  year={2023}
}

@inproceedings{Zelikman2023,
  title={Self-taught optimizer (stop): Recursively self-improving code generation},
  author={Zelikman, Eric and Lorch, Eliana and Mackey, Lester and Kalai, Adam Tauman},
  booktitle={First Conference on Language Modeling},
  year={2024}
}

@inproceedings{Nong2023ICSE,
  title={Vulgen: Realistic vulnerability generation via pattern mining and deep learning},
  author={Nong, Yu and Ou, Yuzhe and Pradel, Michael and Chen, Feng and Cai, Haipeng},
  booktitle={2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE)},
  pages={2527--2539},
  year={2023},
  organization={IEEE}
}

@inproceedings{Joshi2023AAAI,
  title={Repair is nearly generation: Multilingual program repair with llms},
  author={Joshi, Harshit and Sanchez, Jos{\'e} Cambronero and Gulwani, Sumit and Le, Vu and Verbruggen, Gust and Radi{\v{c}}ek, Ivan},
  booktitle={Proceedings of the AAAI Conference on Artificial Intelligence},
  volume={37},
  pages={5131--5140},
  year={2023}
}


@inproceedings{pearce2023examining,
  title={Examining zero-shot vulnerability repair with large language models},
  author={Pearce, Hammond and Tan, Benjamin and Ahmad, Baleegh and Karri, Ramesh and Dolan-Gavitt, Brendan},
  booktitle={2023 IEEE Symposium on Security and Privacy (SP)},
  pages={2339--2356},
  year={2023},
  organization={IEEE}
}

@inproceedings{ladisa2023sok,
  title={Sok: Taxonomy of attacks on open-source software supply chains},
  author={Ladisa, Piergiorgio and Plate, Henrik and Martinez, Matias and Barais, Olivier},
  booktitle={2023 IEEE Symposium on Security and Privacy (SP)},
  pages={1509--1526},
  year={2023},
  organization={IEEE}
}

@misc{USGov2023,
    author  = {{US Government}},
    title   = {Federal register},
    year    = {2023},
    note = {Executive Order on the Safe, Secure, and Trustworthy Development and Use of Artificial Intelligence},
    url = {https://www.federalregister.gov/documents/2023/11/01/2023-24283/safe-secure-and-trustworthy-development-and-use-of-artificial-intelligence}
}


@inproceedings{khoury2023secure,
  title={How secure is code generated by chatgpt?},
  author={Khoury, Rapha{\"e}l and Avila, Anderson R and Brunelle, Jacob and Camara, Baba Mamadou},
  booktitle={2023 IEEE international conference on systems, man, and cybernetics (SMC)},
  pages={2445--2451},
  year={2023},
  organization={IEEE}
}

@article{taviss2024asm2seq,
  title={Asm2seq: Explainable assembly code functional summary generation for reverse engineering and vulnerability analysis},
  author={Taviss, Scarlett and Ding, Steven HH and Zulkernine, Mohammad and Charland, Philippe and Acharya, Sudipta},
  journal={Digital Threats: Research and Practice},
  volume={5},
  number={1},
  pages={1--25},
  year={2024},
  publisher={ACM New York, NY}
}

@article{zhu2023adfl,
  title={ADFL: Defending backdoor attacks in federated learning via adversarial distillation},
  author={Zhu, Chengcheng and Zhang, Jiale and Sun, Xiaobing and Chen, Bing and Meng, Weizhi},
  journal={Computers \& Security},
  volume={132},
  pages={103366},
  year={2023},
  publisher={Elsevier}
}

@article{yu2023counterfactual,
  title={Counterfactual explainable conversational recommendation},
  author={Yu, Dianer and Li, Qian and Wang, Xiangmeng and Li, Qing and Xu, Guandong},
  journal={IEEE Transactions on Knowledge and Data Engineering},
  volume={36},
  number={6},
  pages={2388--2400},
  year={2023},
  publisher={IEEE}
}

@article{pearce2025asleep,
  title={Asleep at the keyboard? assessing the security of github copilot’s code contributions},
  author={Pearce, Hammond and Ahmad, Baleegh and Tan, Benjamin and Dolan-Gavitt, Brendan and Karri, Ramesh},
  journal={Communications of the ACM},
  volume={68},
  number={2},
  pages={96--105},
  year={2025},
  publisher={ACM New York, NY, USA}
}

@article{wohler2022committed,
  title={Committed to Trust: A Qualitative Study on Security and Trust in Open Source Software Projects},
  author={W{\"o}hler, Noah and Klemmer, Jan H and Fourn{\'e}, Marcel and Acar, Yasemin and Fahl, Sascha and others},
  journal = {CISPA Communication},
  year={2022},
  publisher={CISPA}
}


@inproceedings{yang2022natural,
  title={Natural attack for pre-trained models of code},
  author={Yang, Zhou and Shi, Jieke and He, Junda and Lo, David},
  booktitle={Proceedings of the 44th International Conference on Software Engineering},
  pages={1482--1493},
  year={2022}
}

@inproceedings{fu2022vulrepair,
  title={VulRepair: a T5-based automated software vulnerability repair},
  author={Fu, Michael and Tantithamthavorn, Chakkrit and Le, Trung and Nguyen, Van and Phung, Dinh},
  booktitle={Proceedings of the 30th ACM joint european software engineering conference and symposium on the foundations of software engineering},
  pages={935--947},
  year={2022}
}

@inproceedings{fu2022linevul,
  title={Linevul: A transformer-based line-level vulnerability prediction},
  author={Fu, Michael and Tantithamthavorn, Chakkrit},
  booktitle={Proceedings of the 19th International Conference on Mining Software Repositories},
  pages={608--620},
  year={2022}
}

@inproceedings{hin2022linevd,
  title={LineVD: Statement-level vulnerability detection using graph neural networks},
  author={Hin, David and Kan, Andrey and Chen, Huaming and Babar, M Ali},
  booktitle={Proceedings of the 19th international conference on mining software repositories},
  pages={596--607},
  year={2022}
}

@article{chakraborty2021deep,
  title={Deep learning based vulnerability detection: Are we there yet?},
  author={Chakraborty and Saikat and Krishna, Rahul and Ding, Yangruibo and Ray, Baishakhi},
  journal={IEEE Transactions on Software Engineering},
  volume={48},
  number={9},
  pages={3280--3296},
  year={2021},
  publisher={IEEE}
}

@article{chen2022neural,
  title={Neural transfer learning for repairing security vulnerabilities in c code},
  author={Chen, Zimin and Kommrusch, Steve and Monperrus, Martin},
  journal={IEEE Transactions on Software Engineering},
  volume={49},
  number={1},
  pages={147--165},
  year={2022},
  publisher={IEEE}
}

@inproceedings{cheng2022path,
  title={Path-sensitive code embedding via contrastive learning for software vulnerability detection},
  author={Cheng, Xiao and Zhang, Guanqin and Wang, Haoyu and Sui, Yulei},
  booktitle={Proceedings of the 31st ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages={519--531},
  year={2022}
}

@inproceedings{lucic2022cf,
  title={Cf-gnnexplainer: Counterfactual explanations for graph neural networks},
  author={Lucic, Ana and Ter Hoeve, Maartje A and Tolomei, Gabriele and De Rijke, Maarten and Silvestri, Fabrizio},
  booktitle={International Conference on Artificial Intelligence and Statistics},
  pages={4499--4511},
  year={2022},
  organization={PMLR}
}


@inproceedings{mosolygo2021towards,
  title={Towards a prototype based explainable javascript vulnerability prediction model},
  author={Mosolyg{\'o}, Bal{\'a}zs and V{\'a}ndor, Norbert and Antal, G{\'a}bor and Heged{\H{u}}s, P{\'e}ter and Ferenc, Rudolf},
  booktitle={2021 International conference on code quality (ICCQ)},
  pages={15--25},
  year={2021},
  organization={IEEE}
}


@inproceedings{yagemann2021arcus,
  title={$\{$ARCUS$\}$: symbolic root cause analysis of exploits in production systems},
  author={Yagemann, Carter and Pruett, Matthew and Chung, Simon P and Bittick, Kennon and Saltaformaggio, Brendan and Lee, Wenke},
  booktitle={30th USENIX Security Symposium (USENIX Security 21)},
  pages={1989--2006},
  year={2021}
}


@inproceedings{yagemann2021automated,
  title={Automated bug hunting with data-driven symbolic root cause analysis},
  author={Yagemann, Carter and Chung, Simon P and Saltaformaggio, Brendan and Lee, Wenke},
  booktitle={Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security},
  pages={320--336},
  year={2021}
}

@inproceedings{suneja2021probing,
  title={Probing model signal-awareness via prediction-preserving input minimization},
  author={Suneja, Sahil and Zheng, Yunhui and Zhuang, Yufan and Laredo, Jim A and Morari, Alessandro},
  booktitle={Proceedings of the 29th ACM joint meeting on european software engineering conference and symposium on the foundations of software engineering},
  pages={945--955},
  year={2021}
}

@inproceedings{tan2021counterfactual,
  title={Counterfactual explainable recommendation},
  author={Tan, Juntao and Xu, Shuyuan and Ge, Yingqiang and Li, Yunqi and Chen, Xu and Zhang, Yongfeng},
  booktitle={Proceedings of the 30th ACM International Conference on Information \& Knowledge Management},
  pages={1784--1793},
  year={2021}
}

@article{nguyen2023,
  title={Graph-based explainable vulnerability prediction},
  author={Nguyen, Hong Quy and Hoang, Thong and Dam, Hoa Khanh and Ghose, Aditya},
  journal={Information and Software Technology},
  volume={177},
  pages={107566},
  year={2025},
  publisher={Elsevier}
}

@article{li2023vulanalyzer,
  title={VulANalyzeR: Explainable binary vulnerability detection with multi-task learning and attentional graph convolution},
  author={Li, Litao and Ding, Steven HH and Tian, Yuan and Fung, Benjamin CM and Charland, Philippe and Ou, Weihan and Song, Leo and Chen, Congwei},
  journal={ACM Transactions on Privacy and Security},
  volume={26},
  number={3},
  pages={1--25},
  year={2023},
  publisher={ACM New York, NY}
}


@article{Moschitti2024,
  title={Assessment of Software Vulnerability Contributing Factors by Model-Agnostic Explainable AI},
  author={Li, Ding and Liu, Yan and Huang, Jun},
  journal={Machine Learning and Knowledge Extraction},
  volume={6},
  number={2},
  pages={1087--1113},
  year={2024},
  publisher={MDPI}
}

@inproceedings{Hajipour2023,
  title={Threat Class Predictor: An explainable framework for predicting vulnerability threat using topic and trend modeling.},
  author={Labr{\`e}che, Fran{\c{c}}ois and Paquette, Serge-Olivier},
  booktitle={CAMLIS},
  pages={113--124},
  year={2022}
}

@inproceedings{Le2024MBU,
  title={Toward improved deep learning-based vulnerability detection},
  author={Sejfia, Adriana and Das, Satyaki and Shafiq, Saad and Medvidovi{\'c}, Nenad},
  booktitle={Proceedings of the 46th IEEE/ACM International Conference on Software Engineering},
  pages={1--12},
  year={2024}
}


@inproceedings{Allix2024,
  title={Can explainability and deep-learning be used for localizing vulnerabilities in source code?},
  author={Marchetto and Alessandro},
  booktitle={Proceedings of the 5th ACM/IEEE International Conference on Automation of Software Test (AST 2024)},
  pages={110--119},
  year={2024}
}

@article{Zhou2019,
  title={A comparative study of deep learning-based vulnerability detection system},
  author={Li, Zhen and Zou, Deqing and Tang, Jing and Zhang, Zhihao and Sun, Mingqian and Jin, Hai},
  journal={IEEE Access},
  volume={7},
  pages={103184--103197},
  year={2019},
  publisher={IEEE}
}

@inproceedings{Li2022Empirical,
  title={An empirical study of deep learning models for vulnerability detection},
  author={Steenhoek, Benjamin and Rahman, Md Mahbubur and Jiles, Richard and Le, Wei},
  booktitle={2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE)},
  pages={2237--2248},
  year={2023},
  organization={IEEE}
}


@ARTICLE{Zou2020,
  author={Liu, Shigang and Lin, Guanjun and Qu, Lizhen and Zhang, Jun and De Vel, Olivier and Montague, Paul and Xiang, Yang},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={CD-VulD: Cross-Domain Vulnerability Discovery Based on Deep Domain Adaptation}, 
  year={2022},
  volume={19},
  number={1},
  pages={438-451},
  keywords={Software;Deep learning;Training data;Training;Predictive models;Security;Data models;Cross-domain;vulnerability detection/discovery;deep learning;machine learning;domain adaptation},
  doi={10.1109/TDSC.2020.2984505}}

@ARTICLE{Chakraborty2020,
  author={Chakraborty, Saikat and Krishna, Rahul and Ding, Yangruibo and Ray, Baishakhi},
  journal={IEEE Transactions on Software Engineering}, 
  title={Deep Learning Based Vulnerability Detection: Are We There Yet?}, 
  year={2022},
  volume={48},
  number={9},
  pages={3280-3296},
  keywords={Predictive models;Neural networks;Testing;Data models;Security;Training;Training data;Vulnerability;deep learning based vulnerability detection;real world vulnerabilities;graph neural network based vulnerability detection},
  doi={10.1109/TSE.2021.3087402}}



@inproceedings{Ganz2024,
    author = {Ganz, Florian and Fischer, Lukas and Keller, Markus and Beck, Frank and Acar, Yasemin and Backes, Michael},
    title = {Software Defect Localization Using Explainable Deep Learning},
    booktitle = {Proceedings of the 17th ACM Workshop on Artificial Intelligence and Security},
    year = {2024},
    publisher = {ACM},
     url = {https://api-depositonce.tu-berlin.de/server/api/core/bitstreams/308879e0-b14b-4baf-a0c3-19067184ef50/content}
}

@article{Ruiz2023,
    title = {Software vulnerabilities in TensorFlow-based deep learning applications},
    journal = {Computers and Security},
    volume = {124},
    pages = {102948},
    year = {2023},
    issn = {0167-4048},
    doi = {https://doi.org/10.1016/j.cose.2022.102948},
    url = {https://www.sciencedirect.com/science/article/pii/S0167404822003406},
    author = {Katarzyna Filus and Joanna Domańska},
    keywords = {Software vulnerability, TensorFlow, Deep learning, Security, Static analysis},
    abstract = {Usage of Deep Learning (DL) methods is ubiquitous. It is common in the DL/Artificial Intelligence domain to use 3rd party software. TensorFlow is one of the most popular Machine Learning (ML) platforms. Every software product is a subject to security failures which often result from software vulnerabilities. In this paper, we focus on threats related to 6 common types of threats in TensorFlow implementation. We identify them using Common Weakness Enumeration. We analyze more than 100 vulnerability instances. We focus on vulnerabilities’ severity, impact on confidentiality, integrity and availability, as well as possible results of exploitation. We also use Orthogonal Defect Classification (ODC). The results show that a majority of vulnerabilities are caused by missing/incorrect checking statements, however some fixes require more advanced algorithmic changes. Static Analysis Tools tested in our study show low effectiveness in detecting known vulnerabilities in TensorFlow, but we provide some recommendations based on the obtained alerts to improve overall code quality. Further analysis of vulnerabilities helped us to understand and characterize different vulnerability types and provide a set of observations. We believe that these observations can be useful for the creators of new static analysis tools as a source of inspiration and to build the test cases. We also aim to draw the programmers’ attention to the prevalence of vulnerabilities in deep learning applications and a low effectiveness of automatic tools to find software vulnerabilities in such products.}
}


@article{Yaqin2020,
  title={Software vulnerability analysis and discovery using deep learning techniques: A survey},
  author={Zeng, Peng and Lin, Guanjun and Pan, Lei and Tai, Yonghang and Zhang, Jun},
  journal={IEEE Access},
  volume={8},
  pages={197158--197172},
  year={2020},
  publisher={IEEE}
}


@ARTICLE{Liu2020,
  author={Lin, Guanjun and Wen, Sheng and Han, Qing-Long and Zhang, Jun and Xiang, Yang},
  journal={Proceedings of the IEEE}, 
  title={Software Vulnerability Detection Using Deep Neural Networks: A Survey}, 
  year={2020},
  volume={108},
  number={10},
  pages={1825-1848},
  keywords={Computer security;Semantics;Feature extraction;Open source software;Neural networks;Deep learning;Computer bugs;Cybersecurity;deep neural network (DNN);machine learning (ML);representation learning;software vulnerability},
  doi={10.1109/JPROC.2020.2993293}}


@article{guo2021graphcodebert,
  title={Graphcodebert: Pre-training code representations with data flow. arXiv 2020},
  author={Guo, D and Ren, S and Lu, S and Feng, Z and Tang, D and Liu, S and Zhou, L and Duan, N and Svyatkovskiy, A and Fu, S and others},
  journal={arXiv preprint arXiv:2009.08366},
  year={2021}
}

@inproceedings{wang2024reposvul,
  title={Reposvul: A repository-level high-quality vulnerability dataset},
  author={Wang, Xinchen and Hu, Ruida and Gao, Cuiyun and Wen, Xin-Cheng and Chen, Yujia and Liao, Qing},
  booktitle={Proceedings of the 2024 IEEE/ACM 46th International Conference on Software Engineering: Companion Proceedings},
  pages={472--483},
  year={2024}
}

@article{Li2024IRIS,
  title   = {IRIS: LLM-Assisted Static Analysis for Detecting Security Vulnerabilities},
  author  = {Li, Ziyang and Dutta, Saikat and Naik, Mayur},
  journal = {arXiv preprint arXiv:2405.17238},
  year    = {2024},
  doi     = {10.48550/arXiv.2405.17238},
  url     = {https://arxiv.org/abs/2405.17238},
  note    = {Proposes an LLM-augmented static analysis that infers taint specifications and outperforms CodeQL on CWE-Bench-Java}
}


@INPROCEEDINGS{yamaguchi2014cpg,
  author={Yamaguchi, Fabian and Golde, Nico and Arp, Daniel and Rieck, Konrad},
  booktitle={2014 IEEE Symposium on Security and Privacy}, 
  title={Modeling and Discovering Vulnerabilities with Code Property Graphs}, 
  year={2014},
  volume={},
  number={},
  pages={590-604},
  keywords={Syntactics;Security;Abstracts;Joints;Databases;Kernel;Vulnerabilities;Static Analysis;Graph Databases},
  doi={10.1109/SP.2014.44}}

@inproceedings{velickovic2018gat,
  title        = {Graph Attention Networks},
  author       = {Veli\v{c}kovi\'{c}, Petar and Cucurull, Guillem and Casanova, Arantxa and Romero, Adriana and Li\`{o}, Pietro and Bengio, Yoshua},
  booktitle    = {International Conference on Learning Representations (ICLR)},
  year         = {2018},
  url          = {https://openreview.net/forum?id=rJXMpikCZ}
}

@inproceedings{schlichtkrull2018rgcn,
  title        = {Modeling Relational Data with Graph Convolutional Networks},
  author       = {Schlichtkrull, Michael and Kipf, Thomas N. and Bloem, Peter and van den Berg, Rianne and Titov, Ivan and Welling, Max},
  booktitle    = {The Semantic Web -- ESWC 2018},
  series       = {Lecture Notes in Computer Science},
  volume       = {10843},
  pages        = {593--607},
  publisher    = {Springer},
  year         = {2018},
  doi          = {10.1007/978-3-319-93417-4_38},
  url          = {https://link.springer.com/chapter/10.1007/978-3-319-93417-4_38}
}

@article{wang2019han,
  author  = {Xiao Wang and Houye Ji and Chuan Shi and Bai Wang and Peng Cui and P. Yu and Yanfang Ye},
  title   = {Heterogeneous Graph Attention Network},
  journal = {arXiv preprint arXiv:1903.07293},
  year    = {2019},
  url     = {https://arxiv.org/abs/1903.07293},
  doi     = {10.48550/arXiv.1903.07293}
}


@inproceedings{das2018minerva,
  title     = {Go for a Walk and Arrive at the Answer: Reasoning Over Paths in Knowledge Bases using Reinforcement Learning},
  author    = {Das, Rajarshi and Dhuliawala, Shehzaad and Zaheer, Manzil and Vilnis, Luke and Durugkar, Ishan and Krishnamurthy, Akshay and Smola, Alex and McCallum, Andrew},
  booktitle = {International Conference on Learning Representations (ICLR)},
  year      = {2018},
  url       = {https://openreview.net/forum?id=Syg-YfWCW},
  eprint    = {1711.05851},
  archivePrefix = {arXiv},
  doi       = {10.48550/arXiv.1711.05851}
}

@inproceedings{xiong2017deeppath,
  title     = {DeepPath: A Reinforcement Learning Method for Knowledge Graph Reasoning},
  author    = {Xiong, Wenhan and Hoang, Thien and Wang, William Yang},
  booktitle = {Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing (EMNLP)},
  pages     = {564--573},
  address   = {Copenhagen, Denmark},
  month     = sep,
  year      = {2017},
  publisher = {Association for Computational Linguistics},
  doi       = {10.18653/v1/D17-1060},
  url       = {https://aclanthology.org/D17-1060/}
}


@inproceedings{guo2018lemna,
author = {Guo, Wenbo and Mu, Dongliang and Xu, Jun and Su, Purui and Wang, Gang and Xing, Xinyu},
title = {LEMNA: Explaining Deep Learning based Security Applications},
year = {2018},
isbn = {9781450356930},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3243734.3243792},
doi = {10.1145/3243734.3243792},
abstract = {While deep learning has shown a great potential in various domains, the lack of transparency has limited its application in security or safety-critical areas. Existing research has attempted to develop explanation techniques to provide interpretable explanations for each classification decision. Unfortunately, current methods are optimized for non-security tasks ( e.g., image analysis). Their key assumptions are often violated in security applications, leading to a poor explanation fidelity. In this paper, we propose LEMNA, a high-fidelity explanation method dedicated for security applications. Given an input data sample, LEMNA generates a small set of interpretable features to explain how the input sample is classified. The core idea is to approximate a local area of the complex deep learning decision boundary using a simple interpretable model. The local interpretable model is specially designed to (1) handle feature dependency to better work with security applications ( e.g., binary code analysis); and (2) handle nonlinear local boundaries to boost explanation fidelity. We evaluate our system using two popular deep learning applications in security (a malware classifier, and a function start detector for binary reverse-engineering). Extensive evaluations show that LEMNA's explanation has a much higher fidelity level compared to existing methods. In addition, we demonstrate practical use cases of LEMNA to help machine learning developers to validate model behavior, troubleshoot classification errors, and automatically patch the errors of the target models.},
booktitle = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
pages = {364–379},
numpages = {16},
keywords = {binary analysis, deep recurrent neural networks, explainable AI},
location = {Toronto, Canada},
series = {CCS '18}
}

@inproceedings{ying2019gnnexplainer,
 author = {Ying, Zhitao and Bourgeois, Dylan and You, Jiaxuan and Zitnik, Marinka and Leskovec, Jure},
 booktitle = {Advances in Neural Information Processing Systems},
 editor = {H. Wallach and H. Larochelle and A. Beygelzimer and F. d\textquotesingle Alch\'{e}-Buc and E. Fox and R. Garnett},
 pages = {},
 publisher = {Curran Associates, Inc.},
 title = {GNNExplainer: Generating Explanations for Graph Neural Networks},
 url = {https://proceedings.neurips.cc/paper_files/paper/2019/file/d80b7040b773199015de6d3b4293c8ff-Paper.pdf},
 volume = {32},
 year = {2019}
}
